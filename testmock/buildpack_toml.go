// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/buildpacks/lifecycle (interfaces: BuildpackTOML)

// Package testmock is a generated GoMock package.
package testmock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	lifecycle "github.com/buildpacks/lifecycle"
)

// MockBuildpackTOML is a mock of BuildpackTOML interface
type MockBuildpackTOML struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackTOMLMockRecorder
}

// MockBuildpackTOMLMockRecorder is the mock recorder for MockBuildpackTOML
type MockBuildpackTOMLMockRecorder struct {
	mock *MockBuildpackTOML
}

// NewMockBuildpackTOML creates a new mock instance
func NewMockBuildpackTOML(ctrl *gomock.Controller) *MockBuildpackTOML {
	mock := &MockBuildpackTOML{ctrl: ctrl}
	mock.recorder = &MockBuildpackTOMLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBuildpackTOML) EXPECT() *MockBuildpackTOMLMockRecorder {
	return m.recorder
}

// Build mocks base method
func (m *MockBuildpackTOML) Build(arg0 lifecycle.BuildpackPlan, arg1 lifecycle.BuildConfig) (lifecycle.BuildResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", arg0, arg1)
	ret0, _ := ret[0].(lifecycle.BuildResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build
func (mr *MockBuildpackTOMLMockRecorder) Build(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockBuildpackTOML)(nil).Build), arg0, arg1)
}
