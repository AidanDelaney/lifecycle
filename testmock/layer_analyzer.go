// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/buildpacks/lifecycle (interfaces: LayerAnalyzer)

// Package testmock is a generated GoMock package.
package testmock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	lifecycle "github.com/buildpacks/lifecycle"
	buildpack "github.com/buildpacks/lifecycle/buildpack"
	platform "github.com/buildpacks/lifecycle/platform"
)

// MockLayerAnalyzer is a mock of LayerAnalyzer interface.
type MockLayerAnalyzer struct {
	ctrl     *gomock.Controller
	recorder *MockLayerAnalyzerMockRecorder
}

// MockLayerAnalyzerMockRecorder is the mock recorder for MockLayerAnalyzer.
type MockLayerAnalyzerMockRecorder struct {
	mock *MockLayerAnalyzer
}

// NewMockLayerAnalyzer creates a new mock instance.
func NewMockLayerAnalyzer(ctrl *gomock.Controller) *MockLayerAnalyzer {
	mock := &MockLayerAnalyzer{ctrl: ctrl}
	mock.recorder = &MockLayerAnalyzerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLayerAnalyzer) EXPECT() *MockLayerAnalyzerMockRecorder {
	return m.recorder
}

// Analyze mocks base method.
func (m *MockLayerAnalyzer) Analyze(arg0 []buildpack.GroupBuildpack, arg1 bool, arg2 platform.LayersMetadata, arg3 lifecycle.Cache) (platform.CacheMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Analyze", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(platform.CacheMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Analyze indicates an expected call of Analyze.
func (mr *MockLayerAnalyzerMockRecorder) Analyze(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Analyze", reflect.TypeOf((*MockLayerAnalyzer)(nil).Analyze), arg0, arg1, arg2, arg3)
}
