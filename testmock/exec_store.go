// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/buildpacks/lifecycle (interfaces: ExecStore)

// Package testmock is a generated GoMock package.
package testmock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	inputs "github.com/buildpacks/lifecycle/platform/inputs"
)

// MockExecStore is a mock of ExecStore interface.
type MockExecStore struct {
	ctrl     *gomock.Controller
	recorder *MockExecStoreMockRecorder
}

// MockExecStoreMockRecorder is the mock recorder for MockExecStore.
type MockExecStoreMockRecorder struct {
	mock *MockExecStore
}

// NewMockExecStore creates a new mock instance.
func NewMockExecStore(ctrl *gomock.Controller) *MockExecStore {
	mock := &MockExecStore{ctrl: ctrl}
	mock.recorder = &MockExecStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecStore) EXPECT() *MockExecStoreMockRecorder {
	return m.recorder
}

// LookupBp mocks base method.
func (m *MockExecStore) LookupBp(arg0, arg1 string) (inputs.Buildpack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupBp", arg0, arg1)
	ret0, _ := ret[0].(inputs.Buildpack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupBp indicates an expected call of LookupBp.
func (mr *MockExecStoreMockRecorder) LookupBp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupBp", reflect.TypeOf((*MockExecStore)(nil).LookupBp), arg0, arg1)
}

// LookupExt mocks base method.
func (m *MockExecStore) LookupExt(arg0, arg1 string) (inputs.Buildpack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupExt", arg0, arg1)
	ret0, _ := ret[0].(inputs.Buildpack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupExt indicates an expected call of LookupExt.
func (mr *MockExecStoreMockRecorder) LookupExt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupExt", reflect.TypeOf((*MockExecStore)(nil).LookupExt), arg0, arg1)
}
