// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/buildpacks/lifecycle (interfaces: BuildpackFinder)

// Package testmock is a generated GoMock package.
package testmock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	lifecycle "github.com/buildpacks/lifecycle"
)

// MockBuildpackFinder is a mock of BuildpackFinder interface
type MockBuildpackFinder struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackFinderMockRecorder
}

// MockBuildpackFinderMockRecorder is the mock recorder for MockBuildpackFinder
type MockBuildpackFinderMockRecorder struct {
	mock *MockBuildpackFinder
}

// NewMockBuildpackFinder creates a new mock instance
func NewMockBuildpackFinder(ctrl *gomock.Controller) *MockBuildpackFinder {
	mock := &MockBuildpackFinder{ctrl: ctrl}
	mock.recorder = &MockBuildpackFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBuildpackFinder) EXPECT() *MockBuildpackFinderMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockBuildpackFinder) Find(arg0, arg1, arg2 string) (lifecycle.BuildpackTOML, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1, arg2)
	ret0, _ := ret[0].(lifecycle.BuildpackTOML)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockBuildpackFinderMockRecorder) Find(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockBuildpackFinder)(nil).Find), arg0, arg1, arg2)
}
